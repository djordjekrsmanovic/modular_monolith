// <auto-generated />
using System;
using Booking.AccommodationNS.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking.AccommodationNS.Infrastructure.Migrations
{
    [DbContext(typeof(AccommodationDbContext))]
    [Migration("20240214082612_RemoveUserId")]
    partial class RemoveUserId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("accomodaton")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccomodationFacility", b =>
                {
                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccomodationId", "FacilitiesId");

                    b.HasIndex("FacilitiesId");

                    b.ToTable("AccomodationFacility", "accomodaton");
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.AvailabilityPeriodChangeTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvailabilityPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AvailabilityPeriodChangeTrack", "accomodaton");
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.GuestFavouriteAccomodation", b =>
                {
                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccomodationId", "GuestId");

                    b.HasIndex("GuestId");

                    b.ToTable("GuestFavouriteAccomodation", "accomodaton");
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.GuestVisitedAccomodation", b =>
                {
                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GuestId", "AccomodationId");

                    b.HasIndex("AccomodationId");

                    b.ToTable("GuestVisitedAccomodation", "accomodaton");
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.PriceChangeTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OccuredOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PriceChangeTrack", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Accomodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<int>("MinGuests")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isBlocked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Accomodation", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.AvailabilityPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationId");

                    b.ToTable("AvailabilityPeriod", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Facility", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Guest", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Host", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationId");

                    b.ToTable("Photo", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GuestNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("GustId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationId");

                    b.ToTable("Reservation", "accomodaton");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.ReservationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GuestNumber")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationId");

                    b.HasIndex("GuestId");

                    b.ToTable("ReservationRequest", "accomodaton");
                });

            modelBuilder.Entity("AccomodationFacility", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany()
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Booking.Domain.Entities.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.AvailabilityPeriodChangeTrack", b =>
                {
                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "NewPrice", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityPeriodChangeTrackId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AvailabilityPeriodChangeTrackId");

                            b1.ToTable("AvailabilityPeriodChangeTrack", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityPeriodChangeTrackId");
                        });

                    b.OwnsOne("Booking.Accomodation.Domain.ValueObjects.DateTimeSlot", "NewTimeSlot", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityPeriodChangeTrackId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("AvailabilityPeriodChangeTrackId");

                            b1.ToTable("AvailabilityPeriodChangeTrack", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityPeriodChangeTrackId");
                        });

                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "OldPrice", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityPeriodChangeTrackId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AvailabilityPeriodChangeTrackId");

                            b1.ToTable("AvailabilityPeriodChangeTrack", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityPeriodChangeTrackId");
                        });

                    b.OwnsOne("Booking.Accomodation.Domain.ValueObjects.DateTimeSlot", "OldTimeSlot", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityPeriodChangeTrackId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("AvailabilityPeriodChangeTrackId");

                            b1.ToTable("AvailabilityPeriodChangeTrack", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityPeriodChangeTrackId");
                        });

                    b.Navigation("NewPrice")
                        .IsRequired();

                    b.Navigation("NewTimeSlot")
                        .IsRequired();

                    b.Navigation("OldPrice")
                        .IsRequired();

                    b.Navigation("OldTimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.GuestFavouriteAccomodation", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany()
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Booking.Domain.Entities.Guest", null)
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.GuestVisitedAccomodation", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany()
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Booking.Domain.Entities.Guest", null)
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Accomodation.Domain.Entities.PriceChangeTrack", b =>
                {
                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "NewPrice", b1 =>
                        {
                            b1.Property<Guid>("PriceChangeTrackId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PriceChangeTrackId");

                            b1.ToTable("PriceChangeTrack", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("PriceChangeTrackId");
                        });

                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "OldPrice", b1 =>
                        {
                            b1.Property<Guid>("PriceChangeTrackId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PriceChangeTrackId");

                            b1.ToTable("PriceChangeTrack", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("PriceChangeTrackId");
                        });

                    b.Navigation("NewPrice")
                        .IsRequired();

                    b.Navigation("OldPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Accomodation", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Host", null)
                        .WithMany("Accomodations")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AccomodationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AccomodationId");

                            b1.ToTable("Accomodation", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AccomodationId");
                        });

                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "PricePerGuest", b1 =>
                        {
                            b1.Property<Guid>("AccomodationId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AccomodationId");

                            b1.ToTable("Accomodation", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AccomodationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PricePerGuest")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.AvailabilityPeriod", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany("AvailabilityPeriods")
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booking.Accomodation.Domain.ValueObjects.DateTimeSlot", "DateTimeSlot", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityPeriodId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("AvailabilityPeriodId");

                            b1.ToTable("AvailabilityPeriod", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityPeriodId");
                        });

                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityPeriodId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AvailabilityPeriodId");

                            b1.ToTable("AvailabilityPeriod", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityPeriodId");
                        });

                    b.Navigation("DateTimeSlot")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Guest", b =>
                {
                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("GuestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("GuestId");

                            b1.ToTable("Guest", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("GuestId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Photo", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany("Photos")
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany("Reservations")
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booking.Accomodation.Domain.ValueObjects.DateTimeSlot", "DateTimeSlot", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservation", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.OwnsOne("Booking.Booking.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservation", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("DateTimeSlot")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.ReservationRequest", b =>
                {
                    b.HasOne("Booking.Booking.Domain.Entities.Accomodation", null)
                        .WithMany("ReservationRequests")
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Booking.Domain.Entities.Guest", null)
                        .WithMany("ReservationRequests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booking.Accomodation.Domain.ValueObjects.DateTimeSlot", "DateTimeSlot", b1 =>
                        {
                            b1.Property<Guid>("ReservationRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("ReservationRequestId");

                            b1.ToTable("ReservationRequest", "accomodaton");

                            b1.WithOwner()
                                .HasForeignKey("ReservationRequestId");
                        });

                    b.Navigation("DateTimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Accomodation", b =>
                {
                    b.Navigation("AvailabilityPeriods");

                    b.Navigation("Photos");

                    b.Navigation("ReservationRequests");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Guest", b =>
                {
                    b.Navigation("ReservationRequests");
                });

            modelBuilder.Entity("Booking.Booking.Domain.Entities.Host", b =>
                {
                    b.Navigation("Accomodations");
                });
#pragma warning restore 612, 618
        }
    }
}
